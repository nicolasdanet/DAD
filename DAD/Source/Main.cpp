
/* Copyright (c) 2022 Nicolas Danet. */

/* < https://opensource.org/licenses/GPL-3.0 > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

#include "Sequence.hpp"

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

void performFolder (const juce::File& f)
{
    std::cout << "Scan: " << f.getFullPathName() << std::endl;
    
    core::Sequence (f).write();
}

int perform (const juce::ArgumentList::Argument& a)
{
    performFolder (a.resolveAsExistingFolder()); return 0;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

int main (int argc, char* argv[])
{
    const juce::ArgumentList args (argc, argv);
    
    if (args.size() == 0) { performFolder (juce::File::getCurrentWorkingDirectory()); }
    else {
    //
    for (auto a : args.arguments) {

        int n = juce::ConsoleApplication::invokeCatchingFailures ([a]() { return perform (a); });

        if (n) {
            return EXIT_FAILURE;
        }
    }
    //
    }
    
    return EXIT_SUCCESS;
}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
