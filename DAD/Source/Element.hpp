
/* Copyright (c) 2022 Nicolas Danet. */

/* < https://opensource.org/licenses/GPL-3.0 > */

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#pragma once

#include <JuceHeader.h>

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

#include "Image.hpp"

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

namespace core {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

class Element {

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    template <class T> explicit Element (const Image& i, std::optional<double> base, T range) :
        file_ (i.getFile()),
        height_ (getMeanHeight (range)),
        offset_ (getOffset (base, height_)),
        isBase_ (!base.has_value())
    {
    }
    
    ~Element() = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::File getFile() const
    {
        return file_;
    }
    
    double getHeight() const
    {
        return height_;
    }
    
    double getOffset() const
    {
        return offset_;
    }

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

public:
    juce::String asString() const
    {
        const juce::String name (file_.getFileName().paddedRight (' ', 24));
        const juce::String height (juce::String::toDecimalStringWithSignificantFigures (height_, 4));
        const juce::String offset (juce::String::toDecimalStringWithSignificantFigures (offset_, 4));
        
        const juce::String s (name + " " + offset.substring (0, 5));
        
        if (isBase_) { return (s + " / " + height.substring (0, 5)); }
        else {
            return s;
        }
    }
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    template <class T> static double getMeanHeight (T range)
    {
        double f = 0.0;
        
        const auto [first, last] = range;
        const auto n = std::distance (first, last);
        
        if (n > 0) {
        //
        for (auto iter = first; iter < last; ++iter) { f += iter->getHeight(); }
        
        f /= static_cast<double> (n);
        //
        }
        
        return f;
    }
    
    static double getOffset (std::optional<double> base, double height)
    {
        return (height - base.value_or (height));
    }
    
public:
    Element (const Element&) = default;
    Element (Element&&) = default;
    Element& operator = (const Element&) = default;
    Element& operator = (Element&&) = default;

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------
// MARK: -

private:
    juce::File file_;
    double height_;
    double offset_;
    bool isBase_;

private:
    JUCE_LEAK_DETECTOR (Element)
    
// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

};

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

}

// -----------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------

